// Code generated by mockery v2.53.3. DO NOT EDIT.

package _mock

import (
	context "context"
	banks "simple-reconciliation-service/internal/pkg/reconcile/parser/banks"

	mock "github.com/stretchr/testify/mock"
)

// ReconcileBankData is an autogenerated mock type for the ReconcileBankData type
type ReconcileBankData struct {
	mock.Mock
}

// GetBank provides a mock function with no fields
func (_m *ReconcileBankData) GetBank() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBank")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetParser provides a mock function with no fields
func (_m *ReconcileBankData) GetParser() banks.BankParserType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetParser")
	}

	var r0 banks.BankParserType
	if rf, ok := ret.Get(0).(func() banks.BankParserType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(banks.BankParserType)
	}

	return r0
}

// ToBankTrxData provides a mock function with given fields: ctx, filePath
func (_m *ReconcileBankData) ToBankTrxData(ctx context.Context, filePath string) ([]*banks.BankTrxData, error) {
	ret := _m.Called(ctx, filePath)

	if len(ret) == 0 {
		panic("no return value specified for ToBankTrxData")
	}

	var r0 []*banks.BankTrxData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*banks.BankTrxData, error)); ok {
		return rf(ctx, filePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*banks.BankTrxData); ok {
		r0 = rf(ctx, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*banks.BankTrxData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReconcileBankData creates a new instance of ReconcileBankData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReconcileBankData(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReconcileBankData {
	mock := &ReconcileBankData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.3. DO NOT EDIT.

package _mock

import (
	context "context"
	component "simple-reconciliation-service/internal/app/component"

	mock "github.com/stretchr/testify/mock"
)

// IAppContext is an autogenerated mock type for the IAppContext type
type IAppContext struct {
	mock.Mock
}

// GetComponents provides a mock function with no fields
func (_m *IAppContext) GetComponents() *component.Components {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetComponents")
	}

	var r0 *component.Components
	if rf, ok := ret.Get(0).(func() *component.Components); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*component.Components)
		}
	}

	return r0
}

// GetCtx provides a mock function with no fields
func (_m *IAppContext) GetCtx() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCtx")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Shutdown provides a mock function with no fields
func (_m *IAppContext) Shutdown() {
	_m.Called()
}

// Start provides a mock function with no fields
func (_m *IAppContext) Start() {
	_m.Called()
}

// NewIAppContext creates a new instance of IAppContext. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAppContext(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAppContext {
	mock := &IAppContext{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

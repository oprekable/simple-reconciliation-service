// Code generated by mockery v2.53.3. DO NOT EDIT.

package _mock

import (
	context "context"

	afero "github.com/spf13/afero"

	mock "github.com/stretchr/testify/mock"

	progressbar "github.com/schollz/progressbar/v3"

	sample "simple-reconciliation-service/internal/app/service/sample"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GenerateSample provides a mock function with given fields: ctx, fs, bar, isDeleteDirectory
func (_m *Service) GenerateSample(ctx context.Context, fs afero.Fs, bar *progressbar.ProgressBar, isDeleteDirectory bool) (sample.Summary, error) {
	ret := _m.Called(ctx, fs, bar, isDeleteDirectory)

	if len(ret) == 0 {
		panic("no return value specified for GenerateSample")
	}

	var r0 sample.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, afero.Fs, *progressbar.ProgressBar, bool) (sample.Summary, error)); ok {
		return rf(ctx, fs, bar, isDeleteDirectory)
	}
	if rf, ok := ret.Get(0).(func(context.Context, afero.Fs, *progressbar.ProgressBar, bool) sample.Summary); ok {
		r0 = rf(ctx, fs, bar, isDeleteDirectory)
	} else {
		r0 = ret.Get(0).(sample.Summary)
	}

	if rf, ok := ret.Get(1).(func(context.Context, afero.Fs, *progressbar.ProgressBar, bool) error); ok {
		r1 = rf(ctx, fs, bar, isDeleteDirectory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

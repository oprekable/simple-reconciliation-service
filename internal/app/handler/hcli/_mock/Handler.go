// Code generated by mockery v2.53.2. DO NOT EDIT.

package _mock

import (
	component "simple-reconciliation-service/internal/app/component"

	mock "github.com/stretchr/testify/mock"

	repository "simple-reconciliation-service/internal/app/repository"

	service "simple-reconciliation-service/internal/app/service"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// Exec provides a mock function with no fields
func (_m *Handler) Exec() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with no fields
func (_m *Handler) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SetComponents provides a mock function with given fields: c
func (_m *Handler) SetComponents(c *component.Components) {
	_m.Called(c)
}

// SetRepositories provides a mock function with given fields: r
func (_m *Handler) SetRepositories(r *repository.Repositories) {
	_m.Called(r)
}

// SetServices provides a mock function with given fields: s
func (_m *Handler) SetServices(s *service.Services) {
	_m.Called(s)
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

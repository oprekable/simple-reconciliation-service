// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"context"
	"embed"
	"github.com/spf13/afero"
	"simple-reconciliation-service/internal/app/appcontext"
	"simple-reconciliation-service/internal/app/component"
	"simple-reconciliation-service/internal/app/component/cconfig"
	"simple-reconciliation-service/internal/app/component/cerror"
	"simple-reconciliation-service/internal/app/component/cfs"
	"simple-reconciliation-service/internal/app/component/clogger"
	"simple-reconciliation-service/internal/app/component/csqlite"
	"simple-reconciliation-service/internal/app/err/core"
	"simple-reconciliation-service/internal/app/handler/hcli"
	"simple-reconciliation-service/internal/app/repository"
	"simple-reconciliation-service/internal/app/repository/process"
	"simple-reconciliation-service/internal/app/repository/sample"
	"simple-reconciliation-service/internal/app/server"
	"simple-reconciliation-service/internal/app/server/cli"
	"simple-reconciliation-service/internal/app/service"
	process2 "simple-reconciliation-service/internal/app/service/process"
	sample2 "simple-reconciliation-service/internal/app/service/sample"
)

// Injectors from inject.go:

func WireApp(ctx context.Context, embedFS *embed.FS, appName cconfig.AppName, tz cconfig.TimeZone, errType []core.ErrorType, isShowLog clogger.IsShowLog, dBPath csqlite.DBPath) (*appcontext.AppContext, func(), error) {
	configPaths := _wireConfigPathsValue
	config, err := cconfig.NewConfig(ctx, embedFS, configPaths, appName, tz)
	if err != nil {
		return nil, nil, err
	}
	logger := clogger.ProviderLogger(ctx, isShowLog)
	erType := cerror.ProvideErType(errType)
	cerrorError := cerror.NewError(erType)
	dbSqlite, cleanup, err := csqlite.ProviderDBSqlite(config, logger, dBPath)
	if err != nil {
		return nil, nil, err
	}
	fs := _wireFsValue
	cfsFs := cfs.ProviderCFs(fs)
	components := component.NewComponents(config, logger, cerrorError, dbSqlite, cfsFs)
	db, err := sample.ProviderDB(components)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	processDB, err := process.ProviderDB(components)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	repositories := repository.NewRepositories(db, processDB)
	svc := sample2.ProviderSvc(components, repositories)
	processSvc := process2.ProviderSvc(components, repositories)
	services := service.NewServices(svc, processSvc)
	v := hcli.ProviderHandlers()
	cliCli, err := cli.NewCli(components, services, repositories, v)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	serverServer := server.NewServer(cliCli)
	appContext, cleanup2 := appcontext.NewAppContext(ctx, embedFS, repositories, services, components, serverServer)
	return appContext, func() {
		cleanup2()
		cleanup()
	}, nil
}

var (
	_wireConfigPathsValue = cconfig.ConfigPaths([]string{
		"./*.toml",
		"./params/*.toml",
	})
	_wireFsValue = afero.NewOsFs()
)
